require spatial

# Create a bunch of points on a grid
# between 0 and 500 in both x and y directions
statement ok
CREATE TABLE lhs AS
SELECT
    ST_Point(x, y) as geom,
    (y * 50) + x // 10 as id
FROM
    generate_series(0, 500, 10) r1(x),
    generate_series(0, 500, 10) r2(y);

statement ok
CREATE TABLE rhs AS
SELECT
    ST_Buffer(ST_Point(x, y), 5) as geom,
    (y * 50) + x // 10 as id
FROM
    generate_series(250, 750, 10) r1(x),
    generate_series(250, 750, 10) r2(y);

#-----------------------------------------------------------------------------------------------------------------------
# First pass, disable extension optimizer
#-----------------------------------------------------------------------------------------------------------------------
statement ok
pragma disabled_optimizers='extension'

# Ensure we get the right plans

# INNER JOIN PLAN
query II
EXPLAIN SELECT * FROM lhs JOIN rhs ON st_intersects(lhs.geom, rhs.geom);
----
physical_plan	<REGEX>:.*BLOCKWISE_NL_JOIN.*Join Type: INNER.*

# LEFT JOIN PLAN
query II
EXPLAIN SELECT * FROM lhs LEFT JOIN rhs ON st_intersects(lhs.geom, rhs.geom);
----
physical_plan	<REGEX>:.*BLOCKWISE_NL_JOIN.*Join Type: LEFT.*

# RIGHT JOIN PLAN
query II
EXPLAIN SELECT * FROM lhs RIGHT JOIN rhs ON st_intersects(lhs.geom, rhs.geom);
----
physical_plan	<REGEX>:.*BLOCKWISE_NL_JOIN.*

# FULL JOIN PLAN
query II
EXPLAIN SELECT * FROM lhs FULL OUTER JOIN rhs ON st_intersects(lhs.geom, rhs.geom);
----
physical_plan	<REGEX>:.*BLOCKWISE_NL_JOIN.*Join Type: FULL.*

# Ensure we get the right results

# INNER JOIN
query IIII rowsort inner_join_res
SELECT * FROM lhs JOIN rhs ON st_intersects(lhs.geom, rhs.geom);
----

# LEFT JOIN
query IIII rowsort left_join_res
SELECT * FROM lhs LEFT JOIN rhs ON st_intersects(lhs.geom, rhs.geom);
----

# RIGHT JOIN
query IIII rowsort right_join_res
SELECT * FROM lhs RIGHT JOIN rhs ON st_intersects(lhs.geom, rhs.geom);
----

# FULL JOIN
query IIII rowsort full_join_res
SELECT * FROM lhs FULL OUTER JOIN rhs ON st_intersects(lhs.geom, rhs.geom);
----

#-----------------------------------------------------------------------------------------------------------------------
# Second pass, enable extension optimizer
#-----------------------------------------------------------------------------------------------------------------------
statement ok
pragma disabled_optimizers=''

# Ensure we get the right plans

# INNER JOIN PLAN
query II
EXPLAIN SELECT * FROM lhs JOIN rhs ON st_intersects(lhs.geom, rhs.geom);
----
physical_plan	<REGEX>:.*SPATIAL_JOIN.*Join Type: INNER.*

# LEFT JOIN PLAN
query II
EXPLAIN SELECT * FROM lhs LEFT JOIN rhs ON st_intersects(lhs.geom, rhs.geom);
----
physical_plan	<REGEX>:.*SPATIAL_JOIN.*Join Type: LEFT.*

# RIGHT JOIN PLAN
query II
EXPLAIN SELECT * FROM lhs RIGHT JOIN rhs ON st_intersects(lhs.geom, rhs.geom);
----
physical_plan	<REGEX>:.*SPATIAL_JOIN.*

# FULL JOIN PLAN
query II
EXPLAIN SELECT * FROM lhs FULL OUTER JOIN rhs ON st_intersects(lhs.geom, rhs.geom);
----
physical_plan	<REGEX>:.*SPATIAL_JOIN.*Join Type: FULL.*

# Ensure we get the right reuslts

# INNER JOIN
query IIII rowsort inner_join_res
SELECT * FROM lhs JOIN rhs ON st_intersects(lhs.geom, rhs.geom);
----

# LEFT JOIN
query IIII rowsort left_join_res
SELECT * FROM lhs LEFT JOIN rhs ON st_intersects(lhs.geom, rhs.geom);
----

# RIGHT JOIN
query IIII rowsort right_join_res
SELECT * FROM lhs RIGHT JOIN rhs ON st_intersects(lhs.geom, rhs.geom);
----

# FULL JOIN
query IIII rowsort full_join_res
SELECT * FROM lhs FULL OUTER JOIN rhs ON st_intersects(lhs.geom, rhs.geom);
----